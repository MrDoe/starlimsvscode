/* eslint-disable no-unused-vars */
/* eslint-disable no-undef */
/*
Description.. :	TreeView with drag n' drop support
Author....... :	DC
Date......... : 2023-11-08
*/

// extend treenode with control property
Ext.define('ControlNode', {
    extend: 'Ext.data.Model',
    fields: [
        { name: 'control', type: 'auto' },
        { name: 'properties', type: 'auto' }
    ]
});

Ext.data.NodeInterface.decorate('ControlNode');

const _store = Ext.create('Ext.data.TreeStore', {
    model: 'ControlNode',
    root: {
        text: 'Root',
        expanded: true
    }
});

// add custom extjs tree to tpOutline
const _treePanel = Ext.create('Ext.tree.Panel', {
    title: 'Outline',
    width: 200,
    height: 300,
    store: _store,
    rootVisible: false,
    autoLoad: true,
    viewConfig: {
        plugins: {
            ptype: 'treeviewdragdrop'
        },
        listeners: {
            drop: function (node, data, overModel, dropPosition)
            {
                SetZIndex();

                // reset control's position to new parent control position
                data.records[0].data.control.getEl().setXY(overModel.data.control.getEl().getXY());
            },
            select: function (node, record)
            {
                // set selected control
                selectedControl = record.data.control;
                UpdateSelectionFrame(selectedControl);
                _cboControl.SelectedValue = selectedControl.Id ? selectedControl.Id : selectedControl.Text;
            }
        }
    }
});

// use ext.componentquery to add tree to tpOutline
Ext.ComponentQuery.query('tabpanel')[0].add(_treePanel);

// add control to outline tree
async function AddControlToOutline(control, parentNode)
{
    if (!control)
        return;

    var isLeafNode = true;

    // set parent node to root node if not set or not of valid type
    if (!parentNode)
        parentNode = _treePanel.getRootNode().firstChild;

    // check if control is leaf node
    if (control.xType === "TabControl" || control.xType === "TabPage" || control.xType === "SplitterPanel" ||
        control.xType === "Panel" || control.xType === "GroupBox" || control.xType === "TreeView" ||
        control.xType === "DataGrid" || control.xType === "DataGridTable" || control.xType === "LinkBarGroup")
        isLeafNode = false;

    // set icon
    let icon;
    if (control.xType === "TabPage")
        icon = "images/designer/tabcontrol.png";
    else if (control.xType === "DataGridTable")
    {
        icon = "images/designer/multichoice.png";
    }
    else if (control.xType === "LinkBarGroup" || control.xType === "ButtonBarGroup")
    {
        icon = "images/designer/kpager.png";
    }
    else if (control.xType === "LinkBarItem" || control.xType === "ButtonBarItem")
    {
        icon = "images/designer/view_text.png";
    }
    else
    {
        // get image from lbrControls
        for (let item of _lbrControls.Groups[0].Items)
            if (item.Text === control.xType)
            {
                icon = item.Image;
                break;
            }
    }

    parentNode.set('leaf', false);
    parentNode.set('expandable', true);

    const newNode = Ext.create("ControlNode", {
        text: control.Id,
        icon: icon,
        leaf: isLeafNode,
        expandable: !isLeafNode,
        control: control,
        properties: control.DataProperties
    });

    // add node to tree
    parentNode.appendChild(newNode);

    return newNode;
}

// update tree node id
async function UpdateTreeNodeId(oldId, newId)
{
    let node = await FindNodeById(oldId);
    if (node)
        node.set('text', newId);
}

// find tree node by id, starting from parentNode
async function FindNodeById(id, parentNode)
{
    if (!parentNode)
        parentNode = _treePanel.getRootNode().firstChild;

    if (parentNode.data.control.Id === id)
        return parentNode;

    for (let child of parentNode.childNodes)
    {
        if (child.data.control.Id === id)
            return child;
        else
        {
            let node = await FindNodeById(id, child);
            if (node)
                return node;
        }
    }
}

// calculate z-index of control according to position in treePanel
async function SetZIndex(parentNode, level)
{
    // start from root node
    if (!parentNode)
        parentNode = _treePanel.getRootNode().firstChild;

    // start from level 0
    if (!level)
        level = 0;

    let control = parentNode.data.control;

    if (control.xType === "TabControl" || control.xType === "TabPage" || control.xType === "SplitterPanel" ||
        control.xType === "Panel" || control.xType === "GroupBox" || control.xType === "TreeView" ||
        control.xType === "DataGrid" || control.xType === "StarlimsDataGridTable")
        ++level;

    // set z-index as level
    if (control.getEl === undefined)
        return;

    var element = control.getEl();
    if (element)
        element.setStyle('z-index', level);

    // iterate through all nodes recursively
    for (let child of parentNode.childNodes)
    {
        SetZIndex(child, level + 1);
    }
}

//add context menu to treePanel
const _treePanelContextMenu = Ext.create('Ext.menu.Menu', {
    items: [
        {
            text: 'Delete',
            icon: 'images/designer/button_cancel.png',
            handler: function ()
            {
                __control_OnDelete(selectedControl);
            }
        },
        {
            text: 'Add Tab Page',
            icon: 'images/designer/edit_add.png',
            handler: function ()
            {
                if (selectedControl instanceof TabControl)
                {
                    __add_tab_page(selectedControl);
                }
                else if (selectedControl instanceof LinkBar ||
                         selectedControl instanceof ButtonBar)
                {
                    __add_bar_group(selectedControl);
                }
                else if (selectedControl instanceof LinkBarGroup ||
                         selectedControl instanceof ButtonBarGroup)
                {
                    __add_bar_item(selectedControl);
                }
            }
        }
    ]
});

// add tab page to tab control
async function __add_tab_page(sender, eventArgs)
{
    var tabControl = sender;
    var tabPage = new TabPage();
    tabPage.Id = tabControl.Id + "_tabPage_" + tabControl.TabPages.Count;
    tabPage.Text = "New Tab";
    tabPage.xType = "TabPage";
    tabPage.Selected = false;
    LoadDataProperties(tabPage);
    tabControl.TabPages.Add(tabPage);
    tabControl.SelectedPage = tabControl.TabPages.Count;

    // bind click event
    $('[automation-id="' + tabPage.Id + '"]').click(__control_OnClick);

    htControls.Add(tabPage.Id, tabPage);
    let event = new Object();
    event.target = tabPage;
    __control_OnClick(event);
    LoadCboControls();

    // add tab page to outline
    let selectedNode = await FindNodeById(tabControl.Id);
    AddControlToOutline(tabPage, selectedNode);

    selectedControl = tabPage;
}

// add group to link bar
async function __add_bar_group(sender, eventArgs)
{
    var control = sender;
    var group;
    if(sender instanceof ButtonBar)
    {
        group = new ButtonBarGroup();
        group.xType = "ButtonBarGroup";
    }
    else if (sender instanceof LinkBar)
    {
        group = new LinkBarGroup();
        group.xType = "LinkBarGroup";
    }
    else
        return;

    group.Id = control.Id + "_group_" + control.Groups.Count;
    group.Text = "New Group";
    LoadDataProperties(group);
    control.Groups.Add(group);

    // bind click event
    $('[automation-id="' + group.Id + '"]').click(__control_OnClick);

    htControls.Add(group.Id, group);
    let event = new Object();
    event.target = group;
    __control_OnClick(event);
    LoadCboControls();

    // add group to outline
    let selectedNode = await FindNodeById(control.Id);
    AddControlToOutline(group, selectedNode);

    selectedControl = group;
}

// add item to link bar group
async function __add_bar_item(sender, eventArgs)
{
    var group = sender;
    var item;
    if(group instanceof ButtonBarGroup)
    {
        item = new ButtonBarItem();
        item.xType = "ButtonBarItem";
    }
    else if (group instanceof LinkBarGroup)
    {
        item = new LinkBarItem();
        item.xType = "LinkBarItem";
    }
    else
        return;

    item.Id = group.Id + "_item_" + group.Items.Count;
    item.Text = "New Item";
    LoadDataProperties(item);
    group.Items.Add(item);

    // bind click event
    $('[automation-id="' + item.Id + '"]').click(__control_OnClick);

    htControls.Add(item.Id, item);
    let event = new Object();
    event.target = item;
    __control_OnClick(event);
    LoadCboControls();

    // add item to outline
    let selectedNode = await FindNodeById(group.Id);
    AddControlToOutline(item, selectedNode);

    selectedControl = item;
}

// add context menu to treePanel
_treePanel.on('itemcontextmenu', function (view, record, item, index, e)
{
    e.stopEvent();

    if(_treePanelContextMenu.items && _treePanelContextMenu.items.items)
        _treePanelContextMenu.items.items[1].setVisible(true);

    // change text of context menu item according to selected control
    if (selectedControl instanceof TabControl)
        _treePanelContextMenu.items.items[1].setText('Add Tab Page');
    else if (selectedControl instanceof LinkBar || selectedControl instanceof ButtonBar)
        _treePanelContextMenu.items.items[1].setText('Add Group');
    else if (selectedControl instanceof LinkBarGroup || selectedControl instanceof ButtonBarGroup)
        _treePanelContextMenu.items.items[1].setText('Add Item');
    else
        _treePanelContextMenu.items.items[1].setVisible(false);

    _treePanelContextMenu.showAt(e.getXY());
    return false;
});
