/* eslint-disable no-undef */
/* eslint-disable no-unused-vars */
/*
Description.. :	HTML Forms Designer
Author....... :	DC
Date......... : 2623-07-11
*/
#include "FormDesigner.ContextMenu"
#include "FormDesigner.GUIFunctions"
#include "FormDesigner.TreeView"
#include "FormDesigner.ReadXML"
#include "FormDesigner.SaveXML"

//BEGIN_GLOBAL_DECLARATIONS (place global declarations inside this section)

var _pnlTree = form.All("_pnlTree"); // Panel
var _cboForm = form.All("_cboForm"); // ComboBox 
var _pnlTop = form.All("_pnlTop"); // Panel
//var _tpProperties = form.All( "_tpProperties" ); // TabPage
var _cboControl = form.All("_cboControl"); // ComboBox
var _txtDescription = form.All("_txtDescription"); // TextArea
var _lblDescription = form.All("_lblDescription"); // Label
var _Form1 = form.All("_Form1"); // Panel
var _lbrControls = form.All("_lbrControls"); // LinkBar
var _dgdProperties = form.All("_dgdProperties"); // DataGrid

//END_GLOBAL_DECLARATIONS

// variables for GUIFunctions.js
var controlCounter = 0;
var selectedControl;
var pnlSelected;
var htControls = new Hashtable();

async function lbrControls_OnItemClick(sender, eventArgs)
{
    var controlType = eventArgs.Item.Text;
    AddControl(controlType);
}

async function dgdProperties_OnUpdatingCell(sender, eventArgs)
{
    // write properties back to javascript object
    var sPropertyName = _dgdProperties.GetCurrentRowData("PROPERTY_NAME");
    var value = eventArgs["value"];

    // convert event handler string to function
    if (sPropertyName.includes("On"))
    {
        selectedControl[sPropertyName] = eval(value);
        return;
    }

    // convert string to boolean
    value = value === "True" ? true : value === "False" ? false : value;

    switch (sPropertyName)
    {
        case "(Id)":
            selectedControl.itemId = value;
            // refresh tree node
            let oldId = selectedControl.Id;
            let newId = value;
            UpdateTreeNodeId(oldId, newId);
            return;
        case "Visible":
            // change opacity
            if (value === "True")
                $('[automation-id="' + selectedControl.Id + '"]').css("opacity", "1");
            else
                $('[automation-id="' + selectedControl.Id + '"]').css("opacity", "0.2");
            return;
        case "Height":
            selectedControl.Height = parseInt(value);
            return;
        case "Width":
            selectedControl.Width = parseInt(value);
            return;
        case "Top":
            selectedControl.Top = parseInt(value);
            return;
        case "Left":
            selectedControl.Left = parseInt(value);
            return;
        case "Image":
            //selectedControl.Image = value;
            return;
        case "SelectedPage":
            selectedControl.SelectedPage = value;
            selectedControl.TabPages[value].Selected = true;
            return;
        case "Dock":
            if (!value)
                value = "NONE";
            selectedControl.Dock = value;

            if (value === "FILL" || value === "TOP" || value === "BOTTOM")
            {
                if (value === "TOP" || value === "FILL")
                    selectedControl.Top = 0;
                if (value === "BOTTOM")
                    selectedControl.Top = selectedControl.Parent.Height - selectedControl.Height;

                selectedControl.Left = 0;
                selectedControl.Width = selectedControl.Parent.Width;
            }
            if (value === "LEFT" || value === "RIGHT" || value === "FILL")
            {
                if (value === "LEFT" || value === "FILL")
                    selectedControl.Left = 0;
                if (value === "RIGHT")
                    selectedControl.Left = selectedControl.Parent.Width - selectedControl.Width;

                selectedControl.Top = 0;
                selectedControl.Height = selectedControl.Parent.Height;
            }
            UpdateSelectionFrame(selectedControl);
            return;
        case "Anchor":
            // circumvent bug in starlims-all.js (which prevents unsetting of anchor)
            selectedControl.m_dto.Anchor = selectedControl._FixAnchor(value);
            return;
        default:
            selectedControl[sPropertyName] = value;
    }
}

async function dgdProperties_OnCellDoubleClick(sender, eventArgs)
{
    var value = eventArgs["record"][0];
    if (eventArgs["column"].Id !== "PROPERTY_NAME" || !value.includes("On"))
        return;

    var sFormID = form.Variables["FormID"];
    var sFunctionName = _cboControl.Text.split('(')[0].replace(" ", "_") + value;

    // create a new function
    lims.CallServer("FormDesigner.scModifyCodeBehind.AddFunction", [sFormID, sFunctionName]);

    // execute HTTP GET request to http://localhost:3000/OpenCodeBehind/FormID
    var sURL = "http://localhost:3000/OpenCodeBehind/" + sFormID + "/" + sFunctionName;
    var oReq = new XMLHttpRequest();
    oReq.open("GET", sURL, true);
    oReq.send();

    // set new function name in grid
    eventArgs["record"][1] = sFunctionName;
}

async function dgdProperties_OnUdCellEditorRequest(sender, eventArgs)
{
    var sPropertyName = _dgdProperties.GetCurrentRowData("PROPERTY_NAME");

    // open image picker for Image property
    if (eventArgs["column"].Id === "PROPERTY_VALUE")
    {
        if (sPropertyName.includes("Image"))
        {
            var sImageID = await form.ShowModalDialog(lims.GetFormSource("FormDesigner.dlgImagePicker"));

            // operation canceled
            if (sImageID == null)
                return;

            // "no image" button clicked
            if (sImageID === "NONE")
                sImageID = "";

            if (sPropertyName === "BackgroundImage")
            {
                //selectedControl.BackgroundImage = sImageID;
                if (sImageID === "NONE")
                    selectedControl.body.setStyle("background-image", "");
                else
                    selectedControl.body.setStyle("background-image", "url('" + sImageID + "')");
            }
            else
                selectedControl.Image = sImageID;

            eventArgs.Set("Value", sImageID);
        }
        if (sPropertyName === "Anchor")
        {
            // get mouse position from event
            var mousePos = { x: event.pageX - 100, y: event.pageY };

            // open anchor window
            var sAnchors = await handleAnchorSelect(eventArgs["Value"], mousePos);

            eventArgs.Set("Value", sAnchors);
            
            dgdProperties_OnUpdatingCell(sender, eventArgs);
        }
    }
}

async function dgdProperties_OnRowChange(sender, eventArgs)
{
    if (form.Variables["PreventLoadProperties"])
        return;

    form.Variables["PreventLoadProperties"] = true;

    await Application.DoEvents();

    var sPropertyName = _dgdProperties.GetCurrentRowData("PROPERTY_NAME");
    var sPropertyValue = eventArgs["record"]["PROPERTY_VALUE"];

    await SetProperties(sPropertyName, sPropertyValue);

    form.Variables["PreventLoadProperties"] = false;
}

async function frmFormDesigner_OnLoad(sender, eventArgs)
{
    _dgdProperties.OnCellDoubleClick = dgdProperties_OnCellDoubleClick;

    if (form.formArguments)
    {
        var sFormID = form.formArguments;
        _cboForm.SelectedValue = sFormID;
        return;
    }

    await CreateEmptyForm();

    // populate controls combobox
    form.Variables["PreventLoadCboControl"] = true;
    LoadCboControls();
    form.Variables["PreventLoadCboControl"] = false;
}

async function cboControl_OnSelectionChanged(sender, eventArgs)
{
    if (form.Variables["PreventLoadCboControl"])
        return;

    // load control properties into grid
    var event = { target: htControls[sender.SelectedValue] };
    __control_OnClick(event);
}

async function btnSave_OnClick(sender, eventArgs)
{
    if (_cboForm.SelectedText == "" || _cboForm.SelectedText == null)
        return;

    _Form1.mask("Saving form...");
    await Application.DoEvents();

    var sAppName = _cboForm.SelectedText.split(".")[0];
    var sFormName = _cboForm.SelectedText.split(".")[1];
    var sFormLang = _cboForm.SelectedText.match(/\(([^)]+)\)/)[1];
    SaveForm(sAppName, sFormName, sFormLang);

    _Form1.unmask();
}

async function cboForm_OnSelectionChanged(sender, eventArgs)
{
    _Form1.mask("Loading...");
    await Application.DoEvents();

    var sFormID = form.Variables["FormID"] = _cboForm.SelectedValue;

    // use regex to get language from brackets in combobox text
    var sFormLang = _cboForm.SelectedText.match(/\(([^)]+)\)/)[1];

    // read xml from database
    var sXML = await lims.CallServer("FormDesigner.scGetFormCode", [sFormID, sFormLang]);

    if (!sXML)
    {
        _Form1.unmask();
        return;
    }

    // clear form
    if (_Form1.Controls)
        _Form1.Controls.Clear();

    htControls.Clear();
    pnlSelected.Visible = false;

    form.Variables["PreventLoadProperties"] = true;
    form.Variables["PreventLoadCboControl"] = true;
    form.Variables["PreventClickEvents"] = true;

    await CreateEmptyForm();

    // get function names from code behind
    let sCode = await lims.CallServer("FormDesigner.scGetFormCodeBehind", [sFormID]);
    if (sCode)
    {
        let scriptEl = document.createElement('script');

        let aFunctions = sCode.match(/function\s+([^\s\(]+)\(\s*sender,\s*eventArgs\s*\)/g);
        if (aFunctions && aFunctions.length > 0)
        {
            var aFunctionDeclarations = aFunctions.map(function (declaration)
            {
                return declaration + '{}';
            });
            var aFunctionNames = aFunctions.map(function (declaration)
            {
                var sReturn = declaration.replace('function ', '');
                return sReturn.substring(0, sReturn.indexOf('(')).trim();
            });

            scriptEl.textContent = aFunctionDeclarations.join('\n');
            document.head.appendChild(scriptEl);

            form.Variables["FunctionNames"] = aFunctionNames;
        }
    }

    await Application.DoEvents();

    // load form from xml
    _Form1 = await LoadFormFromXML(sXML);
    _Form1.Guid = _cboForm.SelectedValue;
    _Form1.Controls.Add(pnlSelected);
    selectedControl = _Form1;
    _treePanel.getRootNode().expand(true);

    await Application.DoEvents();

    // bind click and mouse drag events to all controls in form
    BindControlEvents(_Form1);

    SetZIndex();

    form.Variables["PreventLoadProperties"] = false;
    form.Variables["PreventLoadCboControl"] = false;
    form.Variables["PreventClickEvents"] = false;

    _Form1.unmask();
}

async function frmFormDesigner_OnCmdKeyPress(sender, eventArgs)
{
    var nKeyCode = event.keyCode;
    if (nKeyCode == 46) // del key
    {
        // delete control
        if (selectedControl != _Form1)
            __control_OnDelete(selectedControl);
    }
}

async function frmFormDesigner_OnShow(sender, eventArgs)
{
    // hide x-tool css class from LinkBarGroup in _lbrControls
    $('[automation-id="_lbrControls"] .x-tool').css("display", "none");

    // add tree to _pnlTree
    var _pnlTree = Ext.ComponentQuery.query('#_pnlTree')[0];
    _pnlTree.add(_treePanel);

    // let treePanel fill whole panel
    _treePanel.setWidth(_pnlTree.Width);
    _treePanel.setHeight(_pnlTree.Height);
}
//BEGIN_GLOBAL_DECLARATIONS (place global declarations inside this section)


//END_GLOBAL_DECLARATIONS

