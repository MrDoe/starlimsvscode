/* eslint-disable no-unused-vars */
/* eslint-disable no-undef */
/*
Description.. :	GUI helper functions for FormDesigner
Author....... :	DC
Date......... : 2023-11-03
*/
var pnlSelected = new Panel();
pnlSelected.Id = "pnlSelected";
pnlSelected.Type = "Panel";
pnlSelected.Visible = false;
pnlSelected.BackColor = "Transparent";
pnlSelected.setStyle("border", "1px dotted #f00");

// create new form
async function CreateEmptyForm()
{
    // create form panel
    _Form1.Id = "_Form1";
    _Form1.Type = _Form1.xType = "Form";
    _Form1.Guid = System.Guid.NewGuid().ToString();
    _Form1.setStyle('border', '1px dotted black');
    _Form1.CloseOnEscape = false;
    _Form1.ValidateOnClose = false;
    _Form1.title = "";
    htControls.Add(_Form1.Guid, _Form1);
    _Form1.Controls.Add(pnlSelected);
    selectedControl = _Form1;

    // load properties into grid
    LoadDataProperties(_Form1);

    // clear extjs tree store
    await _treePanel.store.getRootNode().removeAll();

    var node = Ext.create("ControlNode", {
        text: "_Form1",
        icon: 'htmlruntime/images/10B98BB5-80D7-B54B-A9BF-F87A586A5675',
        leaf: true,
        expandable: false,
        control: _Form1,
        properties: _Form1.DataPropertiesXml
    });

    // add form to outline
    _treePanel.getRootNode().appendChild(node);
    _treePanel.getRootNode().expand(true);

    // bind click event
    $('[automation-id="_Form1"]').click(__control_OnClick);

    selectedControl = _Form1;
}

// add new control to form
async function AddControl(controlType)
{
    var control;
    switch (controlType)
    {
        case "Button":
            control = new Button();
            control.xType = "Button";
            control.Width = 100;
            control.Height = 26;
            control.BackColor = "White";
            control.ForeColor = "Black";
            control.Image = "htmlruntime/images/3FCCF003-E470-428F-8AAF-8B96D4A43643";
            control.ImageAlign = "LEFT";
            control.VisualStyle = "FLAT";
            break;
        case "ButtonBar":
            control = new ButtonBar();
            control.xType = "ButtonBar";
            control.Width = 200;
            control.Height = 250;
            control.BorderStyle = "SINGLE";
            break;
        case "CheckBox":
            control = new CheckBox();
            control.Width = 100;
            control.Height = 26;
            control.xType = "CheckBox";
            break;
        case "CheckedListBox":
            control = new CheckedListBox();
            control.Width = 300;
            control.Height = 400;
            control.xType = "CheckedListBox";
            break;
        case "ComboBox":
            control = new ComboBox();
            control.Width = 100;
            control.Height = 26;
            control.xType = "ComboBox";
            break;
        case "DataGrid":
            control = new DataGrid();
            control.xType = "DataGrid";
            control.Width = 500;
            control.Height = 300;
            break;
        case "DateTimePicker":
            control = new DateTimePicker();
            control.Width = 100;
            control.Height = 26;
            control.xType = "DateTimePicker";
            control.Value = new Date();
            break;
        case "Frame":
            control = new Frame();
            control.Width = 500;
            control.Height = 300;
            control.xType = "Frame";
            break;
        case "GroupBox":
            control = new GroupBox();
            control.xType = "GroupBox";
            control.Width = 500;
            control.Height = 300;
            break;
        case "Image":
            control = new Image();
            control.xType = "Image";
            control.Width = 32;
            control.Height = 32;
            break;
        case "Line":
            control = new Line();
            control.xType = "Line";
            control.Width = 100;
            break;
        case "Label":
            control = new Label();
            control.Width = 100;
            control.Height = 26;
            control.xType = "Label";
            break;
        case "LinkBar":
            control = new LinkBar();
            control.xType = "LinkBar";
            control.Width = 200;
            control.Height = 250;
            control.BorderStyle = "SINGLE";
            break;
        case "LinkButton":
            control = new LinkButton();
            control.xType = "LinkButton";
            control.Width = 100;
            control.Height = 26;
            control.BackColor = "Transparent";
            control.ForeColor = "Blue";
            control.Image = "htmlruntime/images/3FCCF003-E470-428F-8AAF-8B96D4A43643";
            control.ImageAlign = "LEFT";
            control.VisualStyle = "FLAT";
            break;
        case "LinkLabel":
            control = new LinkLabel();
            control.xType = "LinkLabel";
            control.Width = 100;
            control.Height = 26;
            control.BackColor = "Transparent";
            control.ForeColor = "Blue";
            control.VisualStyle = "FLAT";
            break;
        case "ListBox":
            control = new ListBox();
            control.xType = "ListBox";
            control.Width = 300;
            control.Height = 400;
            break;
        case "ListView":
            control = new ListView();
            control.xType = "ListView";
            control.Width = 300;
            control.Height = 400;
            break;
        case "MonthCalendar":
            control = new MonthCalendar();
            control.xType = "MonthCalendar";
            control.Width = 200;
            control.Height = 200;
            break;
        case "MultiChoice":
            control = new MultiChoice();
            control.xType = "MultiChoice";
            control.Width = 300;
            control.Height = 400;
            break;
        case "Panel":
            control = new Panel();
            control.xType = "Panel";
            control.Width = 500;
            control.Height = 300;
            control.BorderStyle = "FIXEDSINGLE";
            break;
        case "ProgressBar":
            control = new ProgressBar();
            control.xType = "ProgressBar";
            control.Width = 100;
            control.Height = 26;
            break;
        case "RadioButton":
            control = new RadioButton();
            control.xType = "RadioButton";
            control.Text = "RadioButton";
            control.Width = 100;
            control.Height = 26;
            break;
        case "ReportViewer":
            control = new ReportViewer();
            control.xType = "ReportViewer";
            control.Width = 500;
            control.Height = 300;
            break;
        case "RichTextBox":
            control = new RichTextBox();
            control.xType = "RichTextBox";
            control.Width = 500;
            control.Height = 300;
            break;
        case "Schedule":
            control = new Schedule();
            control.xType = "Schedule";
            control.Width = 500;
            control.Height = 300;
            break;
        case "ScriptEditor":
            control = new ScriptEditor();
            control.xType = "ScriptEditor";
            control.Width = 500;
            control.Height = 300;
            break;
        case "SplitContainerH":
            control = new StarlimsSplitContainerH();
            control.xType = "SplitContainerH";
            control.FixedPanel = "PANEL1";
            control.SplitterWidth = 3;
            control.Width = 500;
            control.Height = 300;
            break;
        case "SplitContainerV":
            control = new StarlimsSplitContainerV();
            control.xType = "SplitContainerV";
            control.FixedPanel = "PANEL1";
            control.SplitterWidth = 3;
            control.Width = 500;
            control.Height = 300;
            break;
        case "TabControl":
            control = new TabControl();
            control.Id = controlType + (controlCounter++).toString();
            control.xType = "TabControl";
            control.Width = 500;
            control.Height = 300;
            control.Alignment = "TOP";
            control.ShowCloseButton = false;
            ApplyContextMenu(control);
            break;
        case "TextArea":
            control = new TextArea();
            control.xType = "TextArea";
            control.Width = 200;
            control.Height = 26;
            break;
        case "TextBox":
            control = new TextBox();
            control.xType = "TextBox";
            control.Width = 100;
            control.Height = 26;
            break;
        case "TreeListView":
            control = new TreeListView();
            control.xType = "TreeListView";
            control.Width = 300;
            control.Height = 400;
            break;
        case "TreeView":
            control = new TreeView();
            control.xType = "TreeView";
            control.Width = 300;
            control.Height = 400;
            break;
        case "WebBrowser":
            control = new WebBrowser();
            control.xType = "WebBrowser";
            control.Width = 500;
            control.Height = 300;
            break;
    }

    // set initial properties
    if (!control.Id)
    {
        control.Id = controlType + (controlCounter++).toString();
        control.Guid = System.Guid.NewGuid().ToString();
    }

    if (control.xType != "TabControl" && control.xType != "DateTimePicker")
        control.Text = control.Id;

    control.Top = 20;
    control.Left = 20;

    LoadDataProperties(control);

    // add control to form or as child of selected control
    if (selectedControl && selectedControl.Controls)
        selectedControl.Controls.Add(control);
    else
    {
        selectedControl = _Form1;
        _Form1.Controls.Add(control);
    }

    // add control to outline
    let selectedNode = await FindNodeByGuid(selectedControl.Guid);
    await AddControlToOutline(control, selectedNode);

    // add control to hashtable
    htControls.Add(control.Guid, control);
    let event = new Object();
    event.target = control;
    __control_OnClick(event);
    LoadCboControls();

    // add root table to outline
    if (control.xType === "DataGrid")
    {
        let rootTable = new StarlimsDataGridTable();
        rootTable.xType = "StarlimsDataGridTable";
        rootTable.Id = control.Id + "_RootTable";
        control.RootTable = rootTable;
        LoadDataProperties(rootTable);
        let node = await FindNodeByGuid(control.Guid);
        AddControlToOutline(rootTable, node);
    }

    _treePanel.getRootNode().expand(true);

    control = $('[automation-id="' + control.Id + '"]');

    // bind events to control
    // click event
    control.click(__control_OnClick);

    // make control draggable
    control.mousedown(__control_OnDrag);

    // move control via arrow keys
    control.keydown(__control_OnKeyDown);

    // recalculate z-index
    SetZIndex();
}

async function BindControlEvents(control)
{
    var control = $('[automation-id="' + control.Id + '"]');

    // remove existing click event
    control.off("click");

    // bind click event
    control.click(__control_OnClick);

    if (control.Id !== "_Form1")
    {
        // bind mouse drag event
        control.mousedown(__control_OnDrag);

        // bind keyDown event
        control.keydown(__control_OnKeyDown);
    }

    // recursively bind events to child controls
    if (control.Controls)
    {
        for (let i = 0; i < control.Controls.Count; ++i)
            BindControlEvents(control.Controls[i]);
    }

    // recursively bind events to child panels
    if (control.Panel1)
        BindControlEvents(control.Panel1);
    if (control.Panel2)
        BindControlEvents(control.Panel2);
}

// load controls from hashtable to combobox
async function LoadCboControls()
{
    _cboControl.Items.Clear();

    for (let i = 0; i < htControls.Keys.length; ++i)
    {
        let guid = htControls.Keys[i];
        let control = htControls[guid];

        _cboControl.Items.Add(guid, control.Id + " (" + control.xType + ")");
    }
    _cboControl.SelectedValue = selectedControl.Guid;
}

// loads control's properties on click
async function __control_OnClick(e)
{
    if (form.Variables["PreventClickEvents"] === true)
        return;

    // get clicked dom element
    let element = e.target;

    // get dom element id
    var elementId;
    if (!element.id)
        if (element.parentElement && element.parentElement.id)
            elementId = element.parentElement.id;
        else
            return;
    else
        elementId = element.id;

    // get extjs control from element
    let control = Ext.Component.from(elementId);

    // get control from hashtable for non-extjs controls
    if (!control)
        control = htControls[e.target.Guid];

    if (!control || !control.Id)
        return;

    if (e.stopPropagation !== undefined)
        e.stopPropagation();

    selectedControl = control;

    form.Variables["PreventLoadCboControl"] = true;
    _cboControl.SelectedValue = control.Guid;
    form.Variables["PreventLoadCboControl"] = false;

    // select node in outline _treePanel
    selectedNode = await FindNodeByGuid(control.Guid);
    _treePanel.getSelectionModel().select(selectedNode);

    // update selection frame
    pnlSelected.Visible = true;
    UpdateSelectionFrame(control);

    // update properties grid
    _dgdProperties.Data = control.DataPropertiesXml;

    // loop over data rows and set values
    for (let i = 0; i < _dgdProperties.RowCount; ++i)
    {
        let row = _dgdProperties.DataSet.Tables[0].Rows[i];
        let sPropertyName = row["PROPERTY_NAME"];

        // skip resources
        if (sPropertyName === "Resources")
            continue;

        let value = control[sPropertyName];

        if (value == null)
            value = "";

        // convert function to string and get only function name
        if (sPropertyName.includes("On") && typeof value === "function")
        {
            value = value.toString().split("(")[0].replace("async ", "").replace("function ", "").Trim();
            if (value == "__control_OnClick")
                continue;
        }

        if (value.toString() === "true")
            value = "True";
        else if (value.toString() === "false")
            value = "False";

        if (sPropertyName === "(Id)")
            value = control.Id;

        row["PROPERTY_VALUE"] = value;
    }

    _dgdProperties.DataSet.AcceptChanges();
}

// move control via arrow keys
function __control_OnKeyDown(e)
{
    // get clicked dom element
    let element = e.target;

    // get extjs control from element
    let control = Ext.Component.from(element.id);

    // move control when arrow keys are pressed
    if (e.keyCode === 37)
        control.Left -= 1;
    else if (e.keyCode === 38)
        control.Top -= 1;
    else if (e.keyCode === 39)
        control.Left += 1;
    else if (e.keyCode === 40)
        control.Top += 1;

    // update selection frame
    UpdateSelectionFrame(selectedControl);
}

// make control draggable
function __control_OnDrag(e)
{
    // get extjs control from element
    let control = selectedControl;

    // move control when shift key is pressed
    if (e.shiftKey)
    {
        pnlSelected.Visible = false;

        let event = {
            pageX0: e.pageX,
            pageY0: e.pageY,
            elem: control,
            top0: control.Top,
            left0: control.Left
        };

        function handle_dragging(e)
        {
            pnlSelected.Visible = false;
            event.elem.Left = event.left0 + e.pageX - event.pageX0;
            event.elem.Top = event.top0 + e.pageY - event.pageY0;
        }

        function handle_mouseup()
        {
            pnlSelected.Visible = true;

            // stop listening for movement and mouseup
            $('body').off('mousemove', handle_dragging).off('mouseup', handle_mouseup);

            UpdateSelectionFrame(control);
        }

        $('body').on('mouseup', handle_mouseup).on('mousemove', handle_dragging);
        return;
    }

    // resize control when ctrl key is pressed
    if (e.ctrlKey)
    {
        let event = {
            pageX0: e.pageX,
            pageY0: e.pageY,
            elem: control,
            width0: control.Width,
            height0: control.Height
        };

        // resize handler
        function handle_resizing(e)
        {
            event.elem.Width = event.width0 + (e.pageX - event.pageX0);
            event.elem.Height = event.height0 + (e.pageY - event.pageY0);
        }

        function handle_mouseup(e)
        {
            control.Width = event.elem.Width;
            control.Height = event.elem.Height;

            // stop listening for movement and mouseup
            $('body').off('mousemove', handle_resizing).off('mouseup', handle_mouseup);

            UpdateSelectionFrame(control);
        }

        $('body').on('mouseup', handle_mouseup).on('mousemove', handle_resizing);
    }
}

// delete selected control
async function __control_OnDelete(control)
{
    // delete children first
    if (control.Controls)
    {
        for (let i = control.Controls.Count - 1; i >= 0; --i)
            __control_OnDelete(control.Controls[i]);
    }

    let parent = control.Parent;

    // delete column
    if (control.xType === "DataGridColumn")
        parent.RootTable.Columns.Remove(control);

    // delete tab page
    if (control.xType === "TabPage")
        parent.TabPages.Remove(control);

    // delete link bar group
    if (control.xType === "LinkBarGroup" || control.xType === "ButtonBarGroup")
        parent.Groups.Remove(control);

    // delete link bar item
    if (control.xType === "LinkBarItem" || control.xType === "ButtonBarItem")
        parent.Items.Remove(control);

    // delete control
    if (control.Dispose !== undefined)
        control.Dispose();

    // delete control from outline treeview
    var node = await FindNodeByGuid(control.Guid);
    node.remove();

    // delete control from hashtable
    htControls.Remove(control.Guid);

    // select form in _cboControl
    _cboControl.SelectedValue = _Form1.Id;
    UpdateSelectionFrame(_Form1);
}

// draw a selection frame around the selected control
async function UpdateSelectionFrame(sender)
{
    $('[automation-id="pnlSelected"]').css("cssText", "border: 1px dotted rgb(255, 0, 0); z-index: 99999; pointer-events: none; position: sticky !important;");

    // iterate over all parents and add positions to get absolute position
    let top = sender.Top ? sender.Top : 0;
    let left = sender.Left ? sender.Left : 0;
    let width = sender.Width ? sender.Width + 2 : 0;
    let height = sender.Height ? sender.Height + 2 : 0;
    let parent = sender.Parent;

    // don't set width and height above form width
    width = Math.min(width, _Form1.Width - 5);
    height = Math.min(height, _Form1.Height - 5);

    let nTabPages = 0;
    while (parent && parent.Id !== "_Form1")
    {
        if (parent.xType === "TabControl" && parent.ShowTabs == true)
            nTabPages++;

        top += parent.Top;
        left += parent.Left;
        parent = parent.Parent;
    }
    const tabHeaderSize = 29; // set this according to your css style
    let tabCorrectionTop = nTabPages * tabHeaderSize;
    let tabCorrectionLeft = nTabPages * 2;
    pnlSelected.Top = top - 2 + tabCorrectionTop;
    pnlSelected.Left = left - 2 + tabCorrectionLeft;

    // use jquery to set width and height to avoid automatic resizing for sticky elements
    $('[automation-id="pnlSelected"]').width(width);
    $('[automation-id="pnlSelected"]').height(height);
}

function SetProperties(sPropertyName, sPropertyValue)
{
    // switch type of PROPERTY_VALUE column depending on PROPERTY_TYPE
    var sColumn = _dgdProperties.RootTable.Columns.FindById("PROPERTY_VALUE");

    if (sPropertyValue === "True" || sPropertyValue === "False")
    {
        sColumn.Type = "ComboBox";
        sColumn.DataArray = [["True", "True"], ["False", "False"]];
        return;
    }

    // get event handler functions
    if (sPropertyName.includes("On"))
    {
        sColumn.Type = "ComboBox";

        // convert functionNames array to DataArray
        let functionNames = form.Variables["FunctionNames"];
        if (functionNames && functionNames.length > 0)
        {
            let aValues = new Array(functionNames.length + 1);

            aValues[0] = ["", ""];
            for (let i = 0; i < functionNames.length; ++i)
                aValues[i + 1] = [functionNames[i], functionNames[i]];

            sColumn.DataArray = aValues;
        }
        else
            sColumn.DataArray = [["", ""]];
        return;
    }

    switch (sPropertyName)
    {
        case "Anchor":
            sColumn.Type = "UD";
            break;
        case "Align":
            sColumn.Type = "ComboBox";
            sColumn.DataArray = [["BEGIN", "BEGIN"], ["MIDDLE", "MIDDLE"], ["END", "END"], ["STRETCH", "STRETCH"], ["STRETCHMAX", "STRETCHMAX"]];
            break;
        case "Alignment":
            sColumn.Type = "ComboBox";
            sColumn.DataArray = [["TOP", "TOP"], ["BOTTOM", "BOTTOM"], ["LEFT", "LEFT"], ["RIGHT", "RIGHT"]];
            break;
        case "CheckBehavior":
            sColumn.Type = "ComboBox";
            sColumn.DataArray = [["MULTIPLE", "MULTIPLE"], ["MULTIPLEEXTENDED", "MULTIPLEEXTENDED"], ["SINGLE", "SINGLE"]];
            break;
        case "ContentOverflow":
            sColumn.Type = "ComboBox";
            sColumn.DataArray = [["SCROLL", "SCROLL"], ["RESIZE", "RESIZE"], ["HIDE", "HIDE"], ["ANCHOR", "ANCHOR"]];
            break;
        case "DisplayMode":
            sColumn.Type = "ComboBox";
            sColumn.DataArray = [["AUTO", "AUTO"], ["CENTER", "CENTER"], ["NORMAL", "NORMAL"], ["STRETCH", "STRETCH"]];
            break;
        case "FirstDayOfWeek":
            sColumn.Type = "ComboBox";
            sColumn.DataArray = [["DEFAULT", "DEFAULT"], ["SUNDAY", "SUNDAY"], ["MONDAY", "MONDAY"], ["TUESDAY", "TUESDAY"], ["WEDNESDAY", "WEDNESDAY"], ["THURSDAY", "THURSDAY"], ["FRIDAY", "FRIDAY"], ["SATURDAY", "SATURDAY"]];
            break;
        case "Layout":
            sColumn.Type = "ComboBox";
            sColumn.DataArray = [["ABSOLUTE", "ABSOLUTE"], ["HBOX", "HBOX"], ["VBOX", "VBOX"]];
            break;
        case "Pack":
            sColumn.Type = "ComboBox";
            sColumn.DataArray = [["START", "START"], ["CENTER", "CENTER"], ["END", "END"]];
            break;
        case "BackgroundImage":
        case "Image":
            sColumn.Type = "UD";
            break;
        case "ImageAlign":
            sColumn.Type = "ComboBox";
            if (selectedControl.xType === "Button")
                sColumn.DataArray = [["LEFT", "LEFT"], ["RIGHT", "RIGHT"], ["TOP", "TOP"], ["BOTTOM", "BOTTOM"], ["CENTER", "CENTER"]];
            if (selectedControl.xType === "LinkButton")
                sColumn.DataArray = [["LEFT", "LEFT"], ["MIDDLELEFT", "MIDDLELEFT"], ["RIGHT", "RIGHT"], ["MIDDLERIGHT", "MIDDLERIGHT"], ["TOP", "TOP"], ["TOPCENTER", "TOPCENTER"], ["BOTTOM", "BOTTOM"], ["BOTTOMCENTER", "BOTTOMCENTER"]];
            break;
        case "DataBindingBehavior":
            sColumn.Type = "ComboBox";
            sColumn.DataArray = [["APPEND", "APPEND"], ["REPLACE", "REPLACE"], ["REPLACEUNSELECTED", "REPLACEUNSELECTED"]];
            break;
        case "DataLoadingBehavior":
            sColumn.Type = "ComboBox";
            sColumn.DataArray = [["AUTOLOAD", "AUTOLOAD"], ["ONDEMAND", "ONDEMAND"], ["RESETDATA", "RESETDATA"]];
        case "BackColor":
        case "ForeColor":
            sColumn.Type = "TEXTBOX";
            break;
        case "FixedPanel":
            sColumn.Type = "ComboBox";
            sColumn.DataArray = [["PANEL1", "PANEL1"], ["PANEL2", "PANEL2"]];
            break;
        case "Font":
            sColumn.Type = "UD";
            break;
        case "Format":
            if (selectedControl.xType === "DateTimePicker")
            {
                sColumn.Type = "ComboBox";
                sColumn.DataArray = [["SHORT", "SHORT"], ["LONG", "LONG"], ["TIME", "TIME"], ["CUSTOM", "CUSTOM"]];
            }
            else
                sColumn.Type = "TextBox";
            break;
        case "FrameStyle":
            sColumn.Type = "ComboBox";
            sColumn.DataArray = [["FRAME", "FRAME"], ["TOP", "TOP"], ["NONE", "NONE"]];
            break;
        case "SelectedPage":
            sColumn.Type = "ComboBox";
            var aValues = [["0", "0"]];

            for (let i = 1; i <= selectedControl.TabPages.Count; ++i)
                aValues.push([i.toString(), i.toString()]);

            sColumn.DataArray = aValues;
            break;
        case "ScriptLanguage":
            sColumn.Type = "ComboBox";
            sColumn.DataArray = [["STARLIMS", "STARLIMS"], ["JSCRIPT", "JSCRIPT"], ["SQL", "SQL"], ["XML", "XML"]];
            break;
        case "TextAlign":
            sColumn.Type = "ComboBox";
            sColumn.DataArray = [["Left", "Left"], ["Center", "Center"], ["Right", "Right"]];
            break;
        case "TextPosition":
            sColumn.Type = "ComboBox";
            sColumn.DataArray = [["AFTER", "AFTER"], ["BEFORE", "BEFORE"]];
            break;
        case "BorderStyle":
            sColumn.Type = "ComboBox";
            sColumn.DataArray = [["NONE", "NONE"], ["FIXEDSINGLE", "FIXEDSINGLE"], ["FIXED3D", "FIXED3D"]];
            break;
        case "RightToLeft":
            sColumn.Type = "ComboBox";
            sColumn.DataArray = [["NONE", "NONE"], ["YES", "YES"], ["INHERIT", "INHERIT"]];
            break;
        case "Dock":
            sColumn.Type = "ComboBox";
            sColumn.DataArray = [["NONE", "NONE"], ["TOP", "TOP"], ["BOTTOM", "BOTTOM"], ["LEFT", "LEFT"], ["RIGHT", "RIGHT"], ["FILL", "FILL"]];
            break;
        case "Cursor":
            sColumn.Type = "ComboBox";
            sColumn.DataArray = [["Default", "Default"], ["Arrow", "Arrow"], ["Cross", "Cross"], ["Hand", "Hand"], ["Help", "Help"], ["IBeam", "IBeam"], ["No", "No"], ["SizeAll", "SizeAll"], ["SizeNESW", "SizeNESW"], ["SizeNS", "SizeNS"], ["SizeNWSE", "SizeNWSE"], ["SizeWE", "SizeWE"], ["UpArrow", "UpArrow"], ["Wait", "Wait"]];
            break;
        case "SelectionMode":
            sColumn.Type = "ComboBox";
            sColumn.DataArray = [["NONE", "NONE"], ["ONE", "ONE"], ["MULTIPLE", "MULTIPLE"]];
            break;
        case "VisualStyle":
            sColumn.Type = "ComboBox";
            switch (selectedcontrol.xType)
            {
                case "Button":
                    // BMBH custom styles
                    sColumn.DataArray = [["FLAT", "FLAT"], ["RAISED", "RAISED"], ["GREEN", "GREEN"], ["ORANGE", "ORANGE"]];
                    // STARLIMS standard styles
                    //sColumn.DataArray = [["FLAT", "FLAT"], ["RAISED", "RAISED"]];
                    break;
                case "ButtonBar":
                    sColumn.DataArray = [["CLASSIC", "CLASSIC"], ["OFFICE2003", "OFFICE2003"]];
                    break;
                case "LinkBar":
                    sColumn.DataArray = [["OFFICE2003", "OFFICE2003"], ["CLASSIC", "CLASSIC"], ["XP", "XP"]];
                    break;
                case "DataGrid":
                    sColumn.DataArray = [["DEFAULT", "DEFAULT"], ["STANDARD", "STANDARD"], ["OFFICE2003", "OFFICE2003"]];
                    break;
                case "TabControl":
                    sColumn.DataArray = [["CLASSIC", "CLASSIC"], ["OFFICE2003", "OFFICE2003"], ["ELEGANT", "ELEGANT"]];
                    break;
            }
            break;
        case "HeaderStyle":
            sColumn.Type = "ComboBox";
            sColumn.DataArray = [["CLICKABLE", "CLICKABLE"], ["NONCLICKABLE", "NONCLICKABLE"], ["NONE", "NONE"]];
            break;
        case "ViewMode":
            sColumn.Type = "ComboBox";
            sColumn.DataArray = [["DETAILS", "DETAILS"], ["HLIST", "HLIST"], ["VLIST", "VLIST"]];
            break;
        case "Type":
            sColumn.Type = "ComboBox";
            sColumn.DataArray = [["Button", "Button"], ["ButtonBar", "ButtonBar"], ["CheckBox", "CheckBox"], ["ComboBox", "ComboBox"], ["DateTimePicker", "DateTimePicker"], ["Label", "Label"], ["ListBox", "ListBox"], ["ListView", "ListView"], ["RadioButton", "RadioButton"], ["TextBox", "TextBox"], ["TreeView", "TreeView"], ["TextArea", "TextArea"], ["Image", "Image"], ["Panel", "Panel"], ["GroupBox", "GroupBox"], ["TabControl", "TabControl"], ["DataGrid", "DataGrid"], ["SplitContainerH", "SplitContainerH"], ["SplitContainerV", "SplitContainerV"]];
        default:
            sColumn.Type = "TextBox";
    }
    return sColumn;
}

async function handleAnchorSelect(sAnchors, pos)
{
    if (form.Variables["AnchorWindow"])
        return;

    var formArgs = [sAnchors];

    var windowConfig = {
        resizable: false,
        x: pos.x,
        y: pos.y,
        header: false
    };

    return await form.ShowModalDialog(lims.GetFormSource("FormDesigner.dlgAnchor"), formArgs, null, windowConfig);
}

// add tab page to tab control
async function __add_tab_page(sender, eventArgs)
{
    var tabControl = sender;
    var tabPage = new TabPage();
    tabPage.Id = tabControl.Id + "_tabPage_" + tabControl.TabPages.Count;
    tabPage.Guid = System.Guid.NewGuid().ToString();
    tabPage.Text = "New Tab";
    tabPage.xType = "TabPage";
    tabPage.Selected = false;
    LoadDataProperties(tabPage);
    tabControl.TabPages.Add(tabPage);
    tabControl.SelectedPage = tabControl.TabPages.Count;

    // bind click event
    $('[automation-id="' + tabPage.Id + '"]').click(__control_OnClick);

    htControls.Add(tabPage.Guid, tabPage);
    let event = new Object();
    event.target = tabPage;
    __control_OnClick(event);
    LoadCboControls();

    // add tab page to outline
    let selectedNode = await FindNodeByGuid(tabControl.Guid);
    AddControlToOutline(tabPage, selectedNode);

    selectedControl = tabPage;
}

// add group to link bar
async function __add_bar_group(sender, eventArgs)
{
    var control = sender;
    var group;
    if (sender instanceof ButtonBar)
    {
        group = new ButtonBarGroup();
        group.xType = "ButtonBarGroup";
    }
    else if (sender instanceof LinkBar)
    {
        group = new LinkBarGroup();
        group.xType = "LinkBarGroup";
    }
    else
        return;

    group.Id = control.Id + "_group_" + control.Groups.Count;
    group.Guid = System.Guid.NewGuid().ToString();
    group.Text = "New Group";
    LoadDataProperties(group);
    control.Groups.Add(group);

    // bind click event
    $('[automation-id="' + group.Id + '"]').click(__control_OnClick);

    htControls.Add(group.Guid, group);
    let event = new Object();
    event.target = group;
    __control_OnClick(event);
    LoadCboControls();

    // add group to outline
    let selectedNode = await FindNodeByGuid(control.Guid);
    AddControlToOutline(group, selectedNode);

    selectedControl = group;
}

// add item to link bar group
async function __add_bar_item(sender, eventArgs)
{
    var group = sender;
    var item;
    if (group instanceof ButtonBarGroup)
    {
        item = new ButtonBarItem();
        item.xType = "ButtonBarItem";
    }
    else if (group instanceof LinkBarGroup)
    {
        item = new LinkBarItem();
        item.xType = "LinkBarItem";
    }
    else
        return;

    item.Id = group.Id + "_item_" + group.Items.Count;
    item.Guid = System.Guid.NewGuid().ToString();
    item.Text = "New Item";
    LoadDataProperties(item);
    group.Items.Add(item);

    // bind click event
    $('[automation-id="' + item.Id + '"]').click(__control_OnClick);

    htControls.Add(item.Guid, item);
    let event = new Object();
    event.target = item;
    __control_OnClick(event);
    LoadCboControls();

    // add item to outline
    let selectedNode = await FindNodeByGuid(group.Guid);
    AddControlToOutline(item, selectedNode);

    selectedControl = item;
}

// add column to datagrid
async function __add_column(sender, eventArgs)
{
    var control = sender;
    var column = new StarlimsDataGridColumn();
    column.xType = "DataGridColumn";
    column.Id = control.Id + "_column_" + control.Columns.Count;
    column.Guid = System.Guid.NewGuid().ToString();
    column.Text = column.Caption = "New Column";
    column.Width = 100;
    column.Visible = true;
    LoadDataProperties(column);
    control.Columns.Add(column);

    // bind click event
    $('[automation-id="' + column.Id + '"]').click(__control_OnClick);

    htControls.Add(column.Guid, column);
    let event = new Object();
    event.target = column;
    __control_OnClick(event);
    LoadCboControls();

    // add column to outline
    let selectedNode = await FindNodeByGuid(control.Guid);
    AddControlToOutline(column, selectedNode);

    selectedControl = column;
}